#!/usr/bin/env python3

import argparse
import pathlib
import time
import numpy as np
import matplotlib.pyplot as plt
import knc_loader




STEFAN_BOLTZMANN_CONSTANT = 5.67037442e-05
LIGHT_SPEED               = 2.99792458e+10




class timed(object):
    def __init__(self, message):
        self.message = message
        self.start = time.perf_counter()

    def __enter__(self):
        print('{:.<32} '.format(self.message), end='', flush=True)

    def __exit__(self, *args):
        print('{:.3}s'.format(time.perf_counter() - self.start))




def find_nearest(block, val):
    idx = np.argmin(np.abs(block - val))
    return idx, block[idx]




def load_products(filename):
    if 'prods' in filename:
        with timed('load products'):
            p = knc_loader.products(filename)
    else:
        with timed('load app'):
            a = knc_loader.app(filename)
        with timed('make products'):
            p = a.make_products()
        with timed('cache products'):
            p.save(filename.replace('chkpt', 'prods'))
    return p




def block_vertices(block, *args):
    R, Q = [x.T for x in np.meshgrid(block.radial_vertices, block.polar_vertices)]
    return R * np.sin(Q), R * np.cos(Q)




def mesh_vertices(products):
    return [block_vertices(products[k]) for k in products]




def known_fields():
    return ['rho', 'pre', 'ur', 'uq', 'scalar_density', 'scalar_concentration', 'energy', 'gamma_beta', 'temperature']




def block_field(block, field):

    sigma = STEFAN_BOLTZMANN_CONSTANT
    c = LIGHT_SPEED

    if field == 'rho':
        return block.comoving_mass_density

    elif field == 'pre':
        # Note: block.gas_pressure is in units of g / cm^3. Multiply by c^2 to
        # put it in erg / cm^3.
        return block.gas_pressure

    elif field == 'ur':
        return block.radial_four_velocity

    elif field == 'uq':
        return block.polar_four_velocity

    elif field == 'scalar_concentration':
        return block.scalar

    elif field == 'scalar_density':
        # Return the lab-frame (not comoving) scalar volume density.
        u = block.radial_four_velocity
        w = block.polar_four_velocity
        G = (1.0 + u**2 + w**2)**0.5
        s = block.scalar * block.comoving_mass_density * G
        return s

    elif field == 'energy':
        # Return the total gas energy. Assumes the gamma-law index is 4/3.
        p = block.gas_pressure * c**2
        d = block.comoving_mass_density
        u = block.radial_four_velocity
        w = block.polar_four_velocity
        G = (1.0 + u**2 + w**2)**0.5
        e = p / d / (4 / 3 - 1)
        h = c**2 + e + p / d
        data = d * h * G**2 - p - G * d * c**2

    elif field == 'gamma_beta':
        ur = block.radial_four_velocity
        uq = block.polar_four_velocity
        return np.sqrt(ur**2 + uq**2)

    elif field == 'temperature':
        # Return the gas temperature in K. Assumes radiation dominated gas.
        a = 4.0 * sigma / c
        p = block.gas_pressure * c**2
        return (3 * p / a)**0.25

    raise ValueError(f'unknown field {field}')




def mesh_field(products, field, transform=lambda x: x):
    return [transform(block_field(products[k], field)) for k in products]




def label_name(args):
    if args.field == 'rho' and args.log:
        return r'$\log_{{10}}(\rho) \ [\rm{{g/cm^3}}]$'
    elif args.field == 'temperature' and args.log:
        return 'T [K]'
    elif args.field == 'gamma_beta' and args.log:
        return r'$\Gamma \beta$'
    else:
        return args.field




def plot_two_dimensional(products, args):
    vmin, vmax = eval(args.range)
    fig = plt.figure(figsize=[7, 11])
    ax1 = fig.add_subplot(1, 1, 1)

    with timed('make vertices and fields'):
        vertices = mesh_vertices(products)
        field = mesh_field(products, args.field, np.log10 if args.log else lambda x: x)
        setup = next(iter(products.config['model']))
        vmin = min([c.min() for c in field]) if vmin is None else vmin
        vmax = max([c.max() for c in field]) if vmax is None else vmax

    with timed('load plots'):
        for (x, z), c in zip(vertices, field):
            cm = ax1.pcolormesh(x, z, c, vmin=vmin, vmax=vmax, edgecolors='none', lw=0.5, cmap=args.cmap)

    if args.radius is not None:
        ax1.set_xlim(0, args.radius)
        ax1.set_ylim(-args.radius, args.radius)
    ax1.set_xlabel(r'$x \ [\rm{cm}]$')
    ax1.set_ylabel(r'$z \ [\rm{cm}]$')

    ax1.set_aspect('equal')
    fig.colorbar(cm)
    fig.subplots_adjust(left=0, right=1, top=0.9, bottom=0.05)
    fig.suptitle(r'Setup: $\mathtt{{{}}}$   {}   $t = {:.4}s$'.format(setup.replace('_', '-'), label_name(args), products.time))
    return fig




def plot_radial_profile(products, args):
    fig = plt.figure(figsize=[9, 9])
    ax1 = fig.add_subplot(1, 1, 1)
    field = args.field

    if args.theta_index is None:
        r = products.radial_profile.vertices
        d = block_field(products.radial_profile[0], args.field)
    else:
        r  = products.radial_profile.vertices
        polar_vertices_size = np.asarray(mesh_vertices(products)).shape[-1]
        q = np.linspace(0, 2*np.pi, polar_vertices_size)
        setup = next(iter(products.config['model']))
        tidx  = args.theta_index
        d = block_field(products.radial_profile[tidx], args.field)

    ax1.set_title(r'Setup: $\mathtt{{{}}}$    $\theta={:.2f}$   $t = {:.4}s$'.format(setup.replace('_', '-'), q[tidx], products.time))
    ax1.set_ylabel(label_name(args))
    ax1.plot(r, d, '-o', mfc='none')
    ax1.set_xscale('log')
    ax1.set_yscale('log')
    ax1.set_xlabel(r'$r \ \rm{[cm]}$')
    return fig




def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("filenames", nargs='+')
    parser.add_argument('-r', '--range', default='None,None', help='vmin and vmax parameters for the relief plot')
    parser.add_argument('-f', '--field', default='rho', choices=known_fields())
    parser.add_argument('-l', '--log', action='store_true')
    parser.add_argument('-c', '--cmap', default='viridis')
    parser.add_argument('--hardcopy', action='store_true')
    parser.add_argument('--output', '-o', default=None, type=str)
    parser.add_argument('--radius', default=None, type=float)
    parser.add_argument('-tidx', '--theta_index', default=None, type=int)
    args = parser.parse_args()

    filename = args.filenames[0]
    products = load_products(filename)

    if args.theta_index is not None:
        fig = plot_radial_profile(products, args)
    elif products.config['mesh']['num_polar_zones'] > 1:
        fig = plot_two_dimensional(products, args)
    else:
        fig = plot_radial_profile(products, args)

    with timed('show'):
        if args.hardcopy or args.output is not None:
            if args.output is None:
                pngname = format(pathlib.Path(filename).with_suffix('.png'))
            else:
                pngname = args.output
            print('save {}'.format(pngname))
            fig.savefig(pngname, dpi=600)
            fig.clf()
        else:
            plt.show()


if __name__ == "__main__":
    main()
